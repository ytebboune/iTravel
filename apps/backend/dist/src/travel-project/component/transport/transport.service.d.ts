import { PrismaService } from '../../../prisma/prisma.service';
import { CreateTransportOptionDto } from './dto/create-transport-option.dto';
import { TransportVoteDto } from './dto/transport-vote.dto';
import { AddTransportCommentDto } from './dto/add-transport-comment.dto';
import { SortTransportDto } from './dto/sort-transport.dto';
import { Prisma, TravelProject } from '@prisma/client';
import { NotificationService } from 'src/core/notifications/notification.service';
import { WebsocketGateway } from 'src/core/websocket/websocket.gateway';
import { UrlValidator } from 'src/core/utils/url-validator';
import { MonitoringService } from 'src/core/monitoring/monitoring.service';
export declare class TransportService {
    private readonly prisma;
    private readonly notificationService;
    private readonly urlValidator;
    private readonly monitoringService;
    private readonly websocketGateway;
    private readonly logger;
    private readonly SCORE_WEIGHTS;
    constructor(prisma: PrismaService, notificationService: NotificationService, urlValidator: UrlValidator, monitoringService: MonitoringService, websocketGateway: WebsocketGateway);
    authorize(projectId: string, userId: string): Promise<TravelProject>;
    create(projectId: string, dto: CreateTransportOptionDto, userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: Prisma.Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    private calculateScores;
    findAll(projectId: string, userId: string, sortDto?: SortTransportDto): Promise<any[]>;
    vote(userId: string, dto: TransportVoteDto): Promise<{
        updatedAt: Date;
        projectId: string;
        comment: string | null;
        userId: string;
        vote: boolean;
        votedAt: Date;
        transportId: string;
    }>;
    deleteVote(userId: string, transportId: string): Promise<{
        updatedAt: Date;
        projectId: string;
        comment: string | null;
        userId: string;
        vote: boolean;
        votedAt: Date;
        transportId: string;
    }>;
    getVoters(transportId: string, userId: string): Promise<{
        userId: string;
        vote: boolean;
        comment: string;
        votedAt: Date;
    }[]>;
    addComment(userId: string, dto: AddTransportCommentDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        content: string;
        transportId: string;
        parentId: string | null;
    }>;
    selectOption(projectId: string, transportId: string, userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: Prisma.Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    validateOption(projectId: string, transportId: string, userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: Prisma.Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    unvalidateOption(projectId: string, transportId: string, userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: Prisma.Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    getValidatedOption(projectId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: Prisma.Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
}
