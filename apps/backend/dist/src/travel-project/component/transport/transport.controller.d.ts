import { TransportService } from "./transport.service";
import { AddTransportCommentDto } from "./dto/add-transport-comment.dto";
import { CreateTransportOptionDto } from "./dto/create-transport-option.dto";
import { TransportVoteDto } from "./dto/transport-vote.dto";
import { SortTransportDto } from './dto/sort-transport.dto';
export declare class TransportController {
    private readonly service;
    constructor(service: TransportService);
    create(projectId: string, dto: CreateTransportOptionDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: import("@prisma/client/runtime/library").Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    findAll(projectId: string, req: any, sortDto?: SortTransportDto): Promise<any[]>;
    vote(dto: TransportVoteDto, req: any): Promise<{
        updatedAt: Date;
        projectId: string;
        comment: string | null;
        userId: string;
        vote: boolean;
        votedAt: Date;
        transportId: string;
    }>;
    deleteVote(transportId: string, req: any): Promise<{
        updatedAt: Date;
        projectId: string;
        comment: string | null;
        userId: string;
        vote: boolean;
        votedAt: Date;
        transportId: string;
    }>;
    getVoters(transportId: string, req: any): Promise<{
        userId: string;
        vote: boolean;
        comment: string;
        votedAt: Date;
    }[]>;
    comment(dto: AddTransportCommentDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        content: string;
        transportId: string;
        parentId: string | null;
    }>;
    select(projectId: string, id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: import("@prisma/client/runtime/library").Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    validateOption(projectId: string, id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: import("@prisma/client/runtime/library").Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    unvalidateOption(projectId: string, id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: import("@prisma/client/runtime/library").Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
    getValidatedOption(projectId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        projectId: string;
        type: import(".prisma/client").$Enums.TransportType;
        departure: string;
        arrival: string;
        date: Date;
        duration: string | null;
        price: import("@prisma/client/runtime/library").Decimal | null;
        link: string | null;
        company: string | null;
        flightNumber: string | null;
        baggageIncluded: boolean | null;
        nbStops: number | null;
        seatInfo: string | null;
        isSelected: boolean;
        selectedAt: Date | null;
        addedBy: string;
    }>;
}
